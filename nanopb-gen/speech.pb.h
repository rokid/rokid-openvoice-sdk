/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Tue Apr  2 22:29:42 2019. */

#ifndef PB_ROKID_OPEN_SPEECH_V2_SPEECH_PB_H_INCLUDED
#define PB_ROKID_OPEN_SPEECH_V2_SPEECH_PB_H_INCLUDED
#include <pb.h>

#include "speech_types.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _rokid_open_speech_v2_RespType {
    rokid_open_speech_v2_RespType_INTERMEDIATE = 0,
    rokid_open_speech_v2_RespType_ASR_FINISH = 1,
    rokid_open_speech_v2_RespType_FINISH = 2
} rokid_open_speech_v2_RespType;
#define _rokid_open_speech_v2_RespType_MIN rokid_open_speech_v2_RespType_INTERMEDIATE
#define _rokid_open_speech_v2_RespType_MAX rokid_open_speech_v2_RespType_FINISH
#define _rokid_open_speech_v2_RespType_ARRAYSIZE ((rokid_open_speech_v2_RespType)(rokid_open_speech_v2_RespType_FINISH+1))

typedef enum _rokid_open_speech_v2_Lang {
    rokid_open_speech_v2_Lang_ZH = 0,
    rokid_open_speech_v2_Lang_EN = 1
} rokid_open_speech_v2_Lang;
#define _rokid_open_speech_v2_Lang_MIN rokid_open_speech_v2_Lang_ZH
#define _rokid_open_speech_v2_Lang_MAX rokid_open_speech_v2_Lang_EN
#define _rokid_open_speech_v2_Lang_ARRAYSIZE ((rokid_open_speech_v2_Lang)(rokid_open_speech_v2_Lang_EN+1))

typedef enum _rokid_open_speech_v2_VadMode {
    rokid_open_speech_v2_VadMode_LOCAL = 0,
    rokid_open_speech_v2_VadMode_CLOUD = 1
} rokid_open_speech_v2_VadMode;
#define _rokid_open_speech_v2_VadMode_MIN rokid_open_speech_v2_VadMode_LOCAL
#define _rokid_open_speech_v2_VadMode_MAX rokid_open_speech_v2_VadMode_CLOUD
#define _rokid_open_speech_v2_VadMode_ARRAYSIZE ((rokid_open_speech_v2_VadMode)(rokid_open_speech_v2_VadMode_CLOUD+1))

/* Struct definitions */
typedef struct _rokid_open_speech_v2_SpeechOptions {
    rokid_open_speech_v2_Lang lang;
    rokid_open_speech_v1_Codec codec;
    rokid_open_speech_v2_VadMode vad_mode;
    bool has_vend_timeout;
    uint32_t vend_timeout;
    bool no_nlp;
    bool no_intermediate_asr;
    pb_callback_t stack;
    pb_callback_t voice_trigger;
    bool has_voice_power;
    float voice_power;
    bool has_trigger_start;
    uint32_t trigger_start;
    bool has_trigger_length;
    uint32_t trigger_length;
    pb_callback_t skill_options;
    pb_callback_t voice_extra;
    bool has_vad_begin;
    uint32_t vad_begin;
    bool has_no_trigger_confirm;
    bool no_trigger_confirm;
/* @@protoc_insertion_point(struct:rokid_open_speech_v2_SpeechOptions) */
} rokid_open_speech_v2_SpeechOptions;

typedef struct _rokid_open_speech_v2_SpeechResponse {
    int32_t id;
    rokid_open_speech_v2_RespType type;
    rokid_open_speech_v1_SpeechErrorCode result;
    pb_callback_t asr;
    pb_callback_t nlp;
    pb_callback_t action;
    pb_callback_t extra;
    pb_callback_t voice_trigger;
/* @@protoc_insertion_point(struct:rokid_open_speech_v2_SpeechResponse) */
} rokid_open_speech_v2_SpeechResponse;

typedef struct _rokid_open_speech_v2_SpeechRequest {
    int32_t id;
    rokid_open_speech_v1_ReqType type;
    pb_callback_t voice;
    pb_callback_t asr;
    bool has_options;
    rokid_open_speech_v2_SpeechOptions options;
/* @@protoc_insertion_point(struct:rokid_open_speech_v2_SpeechRequest) */
} rokid_open_speech_v2_SpeechRequest;

/* Default values for struct fields */

/* Initializer values for message structs */
#define rokid_open_speech_v2_SpeechOptions_init_default {_rokid_open_speech_v2_Lang_MIN, _rokid_open_speech_v1_Codec_MIN, _rokid_open_speech_v2_VadMode_MIN, false, 0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define rokid_open_speech_v2_SpeechRequest_init_default {0, _rokid_open_speech_v1_ReqType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, rokid_open_speech_v2_SpeechOptions_init_default}
#define rokid_open_speech_v2_SpeechResponse_init_default {0, _rokid_open_speech_v2_RespType_MIN, _rokid_open_speech_v1_SpeechErrorCode_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define rokid_open_speech_v2_SpeechOptions_init_zero {_rokid_open_speech_v2_Lang_MIN, _rokid_open_speech_v1_Codec_MIN, _rokid_open_speech_v2_VadMode_MIN, false, 0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define rokid_open_speech_v2_SpeechRequest_init_zero {0, _rokid_open_speech_v1_ReqType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, rokid_open_speech_v2_SpeechOptions_init_zero}
#define rokid_open_speech_v2_SpeechResponse_init_zero {0, _rokid_open_speech_v2_RespType_MIN, _rokid_open_speech_v1_SpeechErrorCode_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define rokid_open_speech_v2_SpeechOptions_lang_tag 1
#define rokid_open_speech_v2_SpeechOptions_codec_tag 2
#define rokid_open_speech_v2_SpeechOptions_vad_mode_tag 3
#define rokid_open_speech_v2_SpeechOptions_vend_timeout_tag 4
#define rokid_open_speech_v2_SpeechOptions_no_nlp_tag 5
#define rokid_open_speech_v2_SpeechOptions_no_intermediate_asr_tag 6
#define rokid_open_speech_v2_SpeechOptions_stack_tag 7
#define rokid_open_speech_v2_SpeechOptions_voice_trigger_tag 8
#define rokid_open_speech_v2_SpeechOptions_voice_power_tag 9
#define rokid_open_speech_v2_SpeechOptions_trigger_start_tag 10
#define rokid_open_speech_v2_SpeechOptions_trigger_length_tag 11
#define rokid_open_speech_v2_SpeechOptions_skill_options_tag 12
#define rokid_open_speech_v2_SpeechOptions_voice_extra_tag 13
#define rokid_open_speech_v2_SpeechOptions_vad_begin_tag 14
#define rokid_open_speech_v2_SpeechOptions_no_trigger_confirm_tag 15
#define rokid_open_speech_v2_SpeechResponse_id_tag 1
#define rokid_open_speech_v2_SpeechResponse_type_tag 2
#define rokid_open_speech_v2_SpeechResponse_result_tag 3
#define rokid_open_speech_v2_SpeechResponse_asr_tag 4
#define rokid_open_speech_v2_SpeechResponse_nlp_tag 5
#define rokid_open_speech_v2_SpeechResponse_action_tag 6
#define rokid_open_speech_v2_SpeechResponse_extra_tag 7
#define rokid_open_speech_v2_SpeechResponse_voice_trigger_tag 11
#define rokid_open_speech_v2_SpeechRequest_id_tag 1
#define rokid_open_speech_v2_SpeechRequest_type_tag 2
#define rokid_open_speech_v2_SpeechRequest_voice_tag 3
#define rokid_open_speech_v2_SpeechRequest_asr_tag 4
#define rokid_open_speech_v2_SpeechRequest_options_tag 5

/* Struct field encoding specification for nanopb */
extern const pb_field_t rokid_open_speech_v2_SpeechOptions_fields[16];
extern const pb_field_t rokid_open_speech_v2_SpeechRequest_fields[6];
extern const pb_field_t rokid_open_speech_v2_SpeechResponse_fields[9];

/* Maximum encoded size of messages (where known) */
/* rokid_open_speech_v2_SpeechOptions_size depends on runtime parameters */
/* rokid_open_speech_v2_SpeechRequest_size depends on runtime parameters */
/* rokid_open_speech_v2_SpeechResponse_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SPEECH_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
